ns lindsey.interop
  require-ns [clojure.string :refer [upper-case]] end
  ;; :require([clojure.string :refer [upper-case]])
end

java-class SimpleClass
  java-method main [& args]
    println("Embedded -main for SimpleClass")
  end

  java-method ^String noArgs []
    "wowza!"
  end

  java-method ^Long multiply [^Long x]
    *(x, 42)
  end

  java-method ^{:static true}
    staticCharge []
      upper-case("Static charge complete.")
  end
end

java-class StringIterator implements java.util.Iterator

  constructor [^String s]
    super()
    atom({:index 0 :s s})
  end

  java-method ^Boolean hasNext []
    let [{:keys [s index]} = deref(this.state())]
      <(index, count(s))
    end
  end

  java-method ^Character next []
    let [{:keys [s index]} = deref(this.state())
         ch = s.charAt(index)]
      swap!(this.state(), assoc, :index, inc(index))
      ch
    end
  end

end

;; (ns clojure.examples.instance
;;     (:gen-class
;;      :implements [java.util.Iterator]
;;      :init init
;;      :constructors {[String] []}
;;      :state state))

;; java-class MyClass
;;   java-method ^{:access :public,
;;                 :return void
;;                 :static true}
;;     main [& args]
;;       println("Wowza!")
;;   end

;;   java-method ^{:access :public,
;;                 :return String,
;;                 :static true}
;;     addStr [^String s]
;;       str(s, " wowza sauce!")
;;   end
;; end

;; State will always be accessed as `.state`
;; and the value of constructors is the state.

;; java-class StringIterator implements java.util.Iterator
;;   constructor StringIterator [String startingString]
;;     ;; super(...)
;;     atom({:index 0, :s startingString})
;;   end

;;   method hasNext []
;;     let [{:keys [s index]} = this.state.deref()]
;;       <(index, count(s))
;;     end
;;   end

;;   method next []
;;     let [{:keys [s index]} = this.state.deref()
;;          ch = s.charAt(index)]
;;       dosync
;;         alter(this.state, assoc, :index, inc(index))
;;       end
;;       ch
;;     end
;;   end

;; end
